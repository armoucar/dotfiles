#!/bin/bash

# Setup VSCode/Cursor settings with symlinks to centralized configuration

set -e

CONFIG_FILE="$HOME/.oh-my-zsh/custom/config/settings.jsonc"
KEYBINDINGS_FILE="$HOME/.oh-my-zsh/custom/config/keybindings.jsonc"

# VSCode settings paths
VSCODE_SETTINGS="$HOME/Library/Application Support/Code/User/settings.json"
CURSOR_SETTINGS="$HOME/Library/Application Support/Cursor/User/settings.json"

# VSCode keybindings paths
VSCODE_KEYBINDINGS="$HOME/Library/Application Support/Code/User/keybindings.json"
CURSOR_KEYBINDINGS="$HOME/Library/Application Support/Cursor/User/keybindings.json"

# Function to create symlink for settings or keybindings
create_symlink() {
    local source_file="$1"
    local target="$2"
    local target_dir=$(dirname "$target")
    
    # Create directory if it doesn't exist
    mkdir -p "$target_dir"
    
    # Backup existing file if it exists and is not already a symlink
    if [ -f "$target" ] && [ ! -L "$target" ]; then
        cp "$target" "$target.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null
        rm "$target"
    elif [ -L "$target" ]; then
        # Remove existing symlink
        rm "$target"
    fi
    
    # Create symlink to centralized config
    ln -s "$source_file" "$target" 2>/dev/null
}

# Check which editor is installed and create symlinks
if [ -d "$(dirname "$CURSOR_SETTINGS")" ]; then
    create_symlink "$CONFIG_FILE" "$CURSOR_SETTINGS" >/dev/null 2>&1
    create_symlink "$KEYBINDINGS_FILE" "$CURSOR_KEYBINDINGS" >/dev/null 2>&1
fi

if [ -d "$(dirname "$VSCODE_SETTINGS")" ]; then
    create_symlink "$CONFIG_FILE" "$VSCODE_SETTINGS" >/dev/null 2>&1
    create_symlink "$KEYBINDINGS_FILE" "$VSCODE_KEYBINDINGS" >/dev/null 2>&1
fi

echo "âœ“ VSCode settings setup complete"