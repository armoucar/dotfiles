#!/bin/bash
# AeroSpace Workspace Setup Script
# Dynamically distributes workspaces based on monitor count

# Check if aerospace is available
if ! command -v aerospace &> /dev/null; then
    echo "✗ AeroSpace not found"
    exit 1
fi

# Save current workspace
INITIAL_WORKSPACE=$(aerospace list-workspaces --focused)

# Get monitor count
MONITOR_COUNT=$(aerospace list-monitors 2>/dev/null | wc -l | tr -d ' ')

# Define workspace sets
NUMBERS="1 2 3 4 5 6 7 8 9 0"
LETTERS="A B D E G I M N O P Q R S T U V W Y"

# Function to move workspace with double assignment for reliability
move_workspace_safely() {
    local workspace="$1"
    local target_monitor="$2"
    
    # Switch to workspace
    aerospace workspace "$workspace" >/dev/null 2>&1
    
    # Move to target monitor twice for reliability
    aerospace move-workspace-to-monitor "$target_monitor" >/dev/null 2>&1
    aerospace move-workspace-to-monitor "$target_monitor" >/dev/null 2>&1
}

case $MONITOR_COUNT in
    1)
        # Single monitor: all workspaces go to monitor 1
        for ws in $NUMBERS $LETTERS; do
            move_workspace_safely "$ws" 1
        done
        ;;
    2)
        # Two monitors: numbers to monitor 1, letters to monitor 2
        for ws in $NUMBERS; do
            move_workspace_safely "$ws" 1
        done
        
        for ws in $LETTERS; do
            move_workspace_safely "$ws" 2
        done
        ;;
    3)
        # Three monitors: 1-5 to monitor 1, 6-0 to monitor 3, letters to monitor 2
        for ws in 1 2 3 4 5; do
            move_workspace_safely "$ws" 1
        done
        
        for ws in 6 7 8 9 0; do
            move_workspace_safely "$ws" 3
        done
        
        for ws in $LETTERS; do
            move_workspace_safely "$ws" 2
        done
        ;;
    *)
        echo "✗ Unsupported monitor configuration ($MONITOR_COUNT monitors)"
        echo "  Supported: 1-3 monitors"
        exit 1
        ;;
esac

# Get workspaces that are incorrectly placed
get_misplaced_workspaces() {
    local misplaced=""
    
    case $MONITOR_COUNT in
        2)
            # Check numbers should be on monitor 1
            for ws in $NUMBERS; do
                if ! aerospace list-workspaces --monitor 1 2>/dev/null | grep -q "^$ws$"; then
                    misplaced="$misplaced $ws:1"
                fi
            done
            # Check letters should be on monitor 2
            for ws in $LETTERS; do
                if ! aerospace list-workspaces --monitor 2 2>/dev/null | grep -q "^$ws$"; then
                    misplaced="$misplaced $ws:2"
                fi
            done
            ;;
        3)
            # Check 1-5 should be on monitor 1
            for ws in 1 2 3 4 5; do
                if ! aerospace list-workspaces --monitor 1 2>/dev/null | grep -q "^$ws$"; then
                    misplaced="$misplaced $ws:1"
                fi
            done
            # Check 6-0 should be on monitor 3
            for ws in 6 7 8 9 0; do
                if ! aerospace list-workspaces --monitor 3 2>/dev/null | grep -q "^$ws$"; then
                    misplaced="$misplaced $ws:3"
                fi
            done
            # Check letters should be on monitor 2
            for ws in $LETTERS; do
                if ! aerospace list-workspaces --monitor 2 2>/dev/null | grep -q "^$ws$"; then
                    misplaced="$misplaced $ws:2"
                fi
            done
            ;;
    esac
    
    echo "$misplaced"
}

# Retry misplaced workspaces up to 5 times
retry_misplaced_workspaces() {
    local max_retries=5
    local retry_count=0
    
    while [ $retry_count -lt $max_retries ]; do
        local misplaced=$(get_misplaced_workspaces)
        
        if [ -z "$misplaced" ]; then
            return 0  # All workspaces correctly placed
        fi
        
        retry_count=$((retry_count + 1))
        
        # Retry each misplaced workspace
        for item in $misplaced; do
            local workspace=$(echo "$item" | cut -d':' -f1)
            local target_monitor=$(echo "$item" | cut -d':' -f2)
            move_workspace_safely "$workspace" "$target_monitor"
        done
    done
    
    return 1  # Still have misplaced workspaces after max retries
}


# Verify and retry configuration for multi-monitor setups
if [ $MONITOR_COUNT -gt 1 ]; then
    if retry_misplaced_workspaces; then
        echo "✓ AeroSpace setup complete"
    else
        echo "⚠️  AeroSpace setup complete (some workspaces may need manual adjustment)"
    fi
else
    echo "✓ AeroSpace setup complete"
fi

# Return to initial workspace (very last step)
aerospace workspace "$INITIAL_WORKSPACE" >/dev/null 2>&1