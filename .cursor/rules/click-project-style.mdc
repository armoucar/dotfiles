---
description: When I'm creating a new click command or working on the Click project
globs: 
alwaysApply: false
---
# Project Rules & Guidelines

This personal project is a modular CLI tool built with [Click](mdc:https:/click.palletsprojects.com) in Python. It provides a suite of command‐line commands to manage miscellaneous tasks. Commands that I can use to automate my day to day work.

Below is a list of key rules and design guidelines detected among the files:

1. **Command Structure & Organization:**
   - Commands are implemented using Click and grouped logically inside @cli/app/command
   - Each command is defined as a standalone function and then added to a central CLI group.
   - Click functions are always the first in the file.
   - File example: [create.py](mdc:cli/app/command/notes/create.py)

2. **Data Storage & Formatting:**
   - Notes and tasks are stored as YAML files, with filenames containing timestamps and content previews.
   - Metadata (creation date, updated date, tags, completion status) is consistently maintained.

3. **Interactive and External Tools:**
   - fzf is used for interactive item selection across commands (e.g. searching, editing, deleting etc.).
   - Vim is launched for editing content when no direct input is provided.
   - External commands (git, gh, kubectl) are executed via subprocess calls.

4. **Error Handling & User Feedback:**
   - Clear user messages are provided on success, error, or when no items are found.
   - Confirmation prompts (with an option for force deletion) are used to prevent accidental actions.

5. **Environment & Configuration:**
   - Paths and directories (e.g. for notes, tasks, Alfred preferences) are determined using environment variables like `HOME`.
   - Temporary files are used for tasks like content editing and prompt composition, ensuring clean-up afterward.

6. **Coding Practices:**
   - The project adheres to a modular, single-responsibility approach with each file handling a distinct functionality.
   - Consistent use of Python’s type hints and error handling improves code clarity and maintainability.

