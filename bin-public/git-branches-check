#!/usr/bin/env python3
import subprocess
from datetime import datetime, timedelta
import sys
import re
import json
import os
from textwrap import shorten

# Set to True for debugging output
DEBUG = False

try:
    from tabulate import tabulate
    TABULATE_AVAILABLE = True
except ImportError:
    TABULATE_AVAILABLE = False
    print("Warning: tabulate package not found. Using basic table formatting.")
    print("Install with: pip install tabulate\n")


def debug_print(*args, **kwargs):
    """Print debug information if DEBUG is True."""
    if DEBUG:
        print("DEBUG:", *args, **kwargs)


def get_default_remote_branch():
    """Determine the default remote branch (e.g., main or master)."""
    try:
        output = (
            subprocess.check_output(["git", "symbolic-ref", "refs/remotes/origin/HEAD"], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
        # Output is something like "refs/remotes/origin/main"
        return output.split("/")[-1]
    except subprocess.CalledProcessError:
        # Try to guess the default branch
        for default in ["main", "master", "develop", "dev"]:
            try:
                subprocess.check_output(
                    ["git", "show-ref", "--verify", "--quiet", f"refs/remotes/origin/{default}"],
                    stderr=subprocess.DEVNULL,
                )
                return default
            except subprocess.CalledProcessError:
                continue
        return "main"  # fallback default branch


def get_merged_branches(default_remote):
    """Return a list of branches merged into origin/<default_remote>."""
    try:
        output = subprocess.check_output(
            ["git", "branch", "--merged", f"origin/{default_remote}"], stderr=subprocess.DEVNULL
        ).decode()
        merged = []
        for line in output.splitlines():
            branch = line.replace("*", "").strip()
            if branch and branch != default_remote:
                merged.append(branch)
        return merged
    except subprocess.CalledProcessError:
        return []


def get_local_branches():
    """Return a list of tuples: (branch, upstream, commit_date, author, last_commit_msg) sorted by commit date."""
    try:
        output = (
            subprocess.check_output(
                [
                    "git",
                    "for-each-ref",
                    "--sort=committerdate",
                    "--format=%(refname:short)|%(upstream:short)|%(committerdate:iso8601)|%(authorname)|%(contents:subject)",
                    "refs/heads/",
                ],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        branches = []
        for line in output.splitlines():
            parts = line.split("|", 4)  # Split into at most 5 parts
            if len(parts) >= 3:
                branch, upstream, commit_date = parts[0], parts[1], parts[2]
                author = parts[3] if len(parts) > 3 else ""
                commit_msg = parts[4] if len(parts) > 4 else ""
                branches.append((branch, upstream, commit_date, author, commit_msg))
        return branches
    except subprocess.CalledProcessError:
        return []


def get_remote_branches(remote="origin"):
    """Return a list of remote branches with their details."""
    try:
        output = (
            subprocess.check_output(
                [
                    "git",
                    "for-each-ref",
                    "--sort=committerdate",
                    "--format=%(refname:short)|%(committerdate:iso8601)|%(authorname)|%(contents:subject)",
                    f"refs/remotes/{remote}/",
                ],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        branches = []
        for line in output.splitlines():
            parts = line.split("|", 3)  # Split into at most 4 parts
            if len(parts) >= 2:
                branch = parts[0]
                # Skip HEAD reference
                if branch.endswith("/HEAD"):
                    continue
                commit_date = parts[1]
                author = parts[2] if len(parts) > 2 else ""
                commit_msg = parts[3] if len(parts) > 3 else ""
                # Remove the remote/ prefix for easier comparison
                branch_name = branch.replace(f"{remote}/", "")
                branches.append((branch_name, branch, commit_date, author, commit_msg))
        return branches
    except subprocess.CalledProcessError:
        return []


def remote_branch_exists(upstream):
    """Check if the remote tracking branch exists."""
    try:
        subprocess.check_output(
            ["git", "show-ref", "--verify", "--quiet", f"refs/remotes/{upstream}"], stderr=subprocess.DEVNULL
        )
        return True
    except subprocess.CalledProcessError:
        return False


def branch_exists_on_remote(branch_name, remote="origin"):
    """Check if a branch exists on the remote, even without tracking relationship."""
    try:
        output = (
            subprocess.check_output(["git", "ls-remote", "--heads", remote, branch_name], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
        return bool(output)  # If output is not empty, branch exists on remote
    except subprocess.CalledProcessError:
        return False


def check_if_branch_was_merged_remotely(branch_name, remote="origin"):
    """Check if a branch was merged remotely even if it's now deleted."""
    # Try to get the merge commit by looking at the commit messages
    default_remote = get_default_remote_branch()

    try:
        # This gets all commits on the default branch with "Merge" in their message
        output = subprocess.check_output(
            ["git", "log", "--merges", "--grep", f"Merge.*{branch_name}", f"origin/{default_remote}"],
            stderr=subprocess.DEVNULL
        ).decode().strip()

        if output:
            return True

        # If GitHub CLI is available, try to check if the branch had a PR that was merged
        try:
            pr_info = get_pr_info(branch_name, remote)
            if pr_info.get("state") == "MERGED":
                return True
        except Exception:
            pass

        return False
    except subprocess.CalledProcessError:
        return False


def get_ahead_behind_count(branch, upstream):
    """Return the number of commits 'branch' is ahead and behind its upstream."""
    try:
        output = (
            subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{upstream}...{branch}"], stderr=subprocess.DEVNULL
            )
            .decode()
            .strip()
        )
        # Output is of the form "X Y" where X is behind count and Y is ahead count
        parts = output.split()
        if len(parts) == 2:
            return int(parts[0]), int(parts[1])  # behind, ahead
        else:
            return 0, 0
    except subprocess.CalledProcessError:
        return 0, 0


def compare_with_remote(branch, remote="origin"):
    """Compare local branch with remote branch even without tracking relationship."""
    try:
        remote_branch = f"{remote}/{branch}"
        output = (
            subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{remote_branch}...{branch}"],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        parts = output.split()
        if len(parts) == 2:
            return int(parts[0]), int(parts[1])  # behind, ahead
        else:
            return 0, 0
    except subprocess.CalledProcessError:
        return 0, 0


def is_branch_abandoned(commit_date, days_threshold=90):
    """Check if a branch is abandoned based on its last commit date."""
    try:
        dt = datetime.fromisoformat(commit_date)
        now = datetime.now(dt.tzinfo)
        return (now - dt) > timedelta(days=days_threshold)
    except Exception:
        return False


def get_branch_age_days(commit_date):
    """Get the age of a branch in days based on its last commit date."""
    try:
        dt = datetime.fromisoformat(commit_date)
        now = datetime.now(dt.tzinfo)
        return (now - dt).days
    except Exception:
        return 0


def get_current_branch():
    """Get the name of the current branch."""
    try:
        return (
            subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
    except subprocess.CalledProcessError:
        return ""


def get_remote_merged_branches(default_remote, remote="origin"):
    """Return a list of remote branches merged into origin/<default_remote>."""
    try:
        output = subprocess.check_output(
            ["git", "branch", "-r", "--merged", f"{remote}/{default_remote}"], stderr=subprocess.DEVNULL
        ).decode()
        merged = []
        for line in output.splitlines():
            branch = line.replace("*", "").strip()
            if branch and not branch.endswith("/HEAD") and not branch == f"{remote}/{default_remote}":
                # Remove the remote/ prefix
                branch_name = branch.replace(f"{remote}/", "")
                merged.append(branch_name)
        return merged
    except subprocess.CalledProcessError:
        return []


def format_date(commit_date):
    """Format the commit date with a human-readable time ago."""
    try:
        dt = datetime.fromisoformat(commit_date)
        formatted_date = dt.strftime("%Y-%m-%d %H:%M:%S %z")

        # Calculate days since last commit
        now = datetime.now(dt.tzinfo)
        days_ago = (now - dt).days
        if days_ago == 0:
            time_ago = "today"
        elif days_ago == 1:
            time_ago = "yesterday"
        else:
            time_ago = f"{days_ago} days ago"

        return f"{formatted_date} ({time_ago})"
    except Exception:
        return commit_date


def get_remote_url(remote="origin"):
    """Get the URL of the remote repository."""
    try:
        output = (
            subprocess.check_output(["git", "remote", "get-url", remote], stderr=subprocess.DEVNULL).decode().strip()
        )
        return output
    except subprocess.CalledProcessError:
        return ""


def is_github_cli_available():
    """Check if GitHub CLI is available."""
    try:
        subprocess.check_output(["gh", "--version"], stderr=subprocess.DEVNULL)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


def extract_repo_info(remote_url):
    """Extract owner and repo from GitHub URL."""
    owner, repo = None, None

    if "github.com" in remote_url:
        if remote_url.startswith("git@"):
            match = re.search(r"git@github\.com:([^/]+)/([^.]+)(\.git)?", remote_url)
            if match:
                owner, repo = match.groups()[0:2]
        else:
            match = re.search(r"github\.com/([^/]+)/([^.]+)(\.git)?", remote_url)
            if match:
                owner, repo = match.groups()[0:2]

    # Sanitize repo name by removing .git if present
    if repo and repo.endswith(".git"):
        repo = repo[:-4]

    debug_print(f"Extracted repo info: owner={owner}, repo={repo} from URL: {remote_url}")
    return owner, repo


def get_current_repo_info():
    """Get current repository info using gh CLI."""
    if not is_github_cli_available():
        return None, None

    try:
        # Try to get repo info from gh CLI directly
        output = subprocess.check_output(["gh", "repo", "view", "--json", "owner,name"], stderr=subprocess.DEVNULL).decode().strip()
        if output:
            data = json.loads(output)
            owner = data.get("owner", {}).get("login")
            repo = data.get("name")
            debug_print(f"Got repo info from gh CLI: owner={owner}, repo={repo}")
            return owner, repo
    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
        debug_print(f"Error getting repo info from gh CLI: {e}")
        pass

    # Fall back to git remote URL
    remote_url = get_remote_url("origin")
    return extract_repo_info(remote_url)


def get_pr_info(branch_name, remote="origin"):
    """Get comprehensive information about PRs associated with a branch."""
    pr_info = {
        "state": "NO_PR",   # NO_PR, OPEN, CLOSED, MERGED, DRAFT
        "title": "",
        "number": "",
        "url": "",
        "created_at": "",
        "updated_at": "",
        "labels": [],
        "assignees": [],
        "comments": 0
    }

    # Check if GitHub CLI is available
    if not is_github_cli_available():
        debug_print("GitHub CLI not available")
        return pr_info

    # Get owner and repo information
    owner, repo = get_current_repo_info()

    if not owner or not repo:
        debug_print(f"Could not determine owner/repo for branch: {branch_name}")
        return pr_info

    debug_print(f"Fetching PR info for branch: {branch_name} in {owner}/{repo}")

    # Get PR details using GitHub CLI
    try:
        # Fields to fetch from GitHub API
        fields = [
            "state", "title", "number", "url", "createdAt", "updatedAt",
            "labels", "assignees", "comments", "isDraft", "headRefName"
        ]

        # Try all PRs first (both open and closed)
        cmd = [
            "gh", "pr", "list",
            "--json", ",".join(fields),
            "--repo", f"{owner}/{repo}",
            "--limit", "100"  # Increase limit to find more PRs
        ]

        debug_print(f"Running command: {' '.join(cmd)}")
        output = subprocess.check_output(cmd, stderr=subprocess.DEVNULL).decode().strip()

        # Parse all PRs
        all_prs = json.loads(output) if output else []
        debug_print(f"Found {len(all_prs)} PRs in total")

        # Find PRs that match this branch
        matching_prs = []
        for pr in all_prs:
            head_branch = pr.get("headRefName", "")
            debug_print(f"Comparing PR branch '{head_branch}' with '{branch_name}'")
            if head_branch == branch_name:
                matching_prs.append(pr)

        if not matching_prs:
            debug_print(f"No matching PRs found for branch: {branch_name}")
            return pr_info

        # Use the most recent PR if multiple exist
        matching_prs.sort(key=lambda x: x.get("updatedAt", ""), reverse=True)
        pr = matching_prs[0]

        # Process PR state
        if pr.get("isDraft", False):
            pr_info["state"] = "DRAFT"
        else:
            state = pr.get("state", "").upper()
            pr_info["state"] = state

        # Extract other PR details
        pr_info["title"] = pr.get("title", "")
        pr_info["number"] = f"#{pr.get('number', '')}"
        pr_info["url"] = pr.get("url", "")

        # Format dates
        if "createdAt" in pr:
            created_date = datetime.fromisoformat(pr["createdAt"].replace("Z", "+00:00"))
            pr_info["created_at"] = created_date.strftime("%Y-%m-%d")

        if "updatedAt" in pr:
            updated_date = datetime.fromisoformat(pr["updatedAt"].replace("Z", "+00:00"))
            pr_info["updated_at"] = updated_date.strftime("%Y-%m-%d")

        # Extract labels and assignees
        pr_info["labels"] = [label.get("name", "") for label in pr.get("labels", [])]
        pr_info["assignees"] = [user.get("login", "") for user in pr.get("assignees", [])]

        # Count comments
        pr_info["comments"] = len(pr.get("comments", []))

        debug_print(f"Found PR for branch {branch_name}: {pr_info['state']} - {pr_info['title']} {pr_info['number']}")

    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
        debug_print(f"Error fetching PR info: {e}")
    except Exception as e:
        debug_print(f"Unexpected error in get_pr_info: {e}")

    return pr_info


def get_cleanup_recommendation(branch_info, pr_info, is_default_branch=False):
    """Generate a cleanup recommendation based on branch and PR status."""
    if is_default_branch:
        return ""  # No recommendation for default branch

    status = branch_info.get("status", [])
    status_str = ", ".join(status)
    branch_type = branch_info.get("type", "")
    is_current = branch_info.get("is_current", False)
    pr_state = pr_info.get("state", "NO_PR")

    # Don't recommend deleting the current branch
    if is_current:
        if "behind" in status_str:
            return "Update from remote"
        elif "ahead" in status_str:
            return "Push changes"
        return ""

    # Clear deletion candidates
    if "MERGED" in status_str or pr_state == "MERGED":
        if "Local" in branch_type and "Remote" in branch_type:
            return "Delete locally and remotely"
        elif "Local" in branch_type:
            return "Delete locally"
        elif "Remote" in branch_type:
            return "Delete remotely"

    # Abandoned branches
    if "ABANDONED" in status_str:
        if pr_state == "OPEN":
            return "Update or close PR"
        elif pr_state == "NO_PR":
            return "Continue work or delete"
        else:
            return "Consider deleting"

    # Branches with sync issues
    if "behind" in status_str and "ahead" in status_str:
        return "Needs merge/rebase"
    elif "behind" in status_str:
        return "Pull changes"
    elif "ahead" in status_str:
        return "Push changes"

    # PR state based recommendations
    if pr_state == "OPEN" and "stale" in [label.lower() for label in pr_info.get("labels", [])]:
        return "Update PR (labeled as stale)"
    elif pr_state == "DRAFT":
        return "Finish and publish PR"
    elif pr_state == "CLOSED" and "MERGED" not in status_str:
        return "PR closed but not merged - cleanup branch"

    # Other cases
    if "Never pushed" in status_str:
        return "Push to remote"
    elif "untracked" in status_str:
        return "Set up tracking"
    elif "Remote missing" in status_str:
        return "Push to recreate remote or delete locally"

    return ""


def format_table_row(branch_info, pr_info, max_lengths):
    """Format a row for the output table with appropriate column widths."""
    row = []

    # Branch name (with indicator for current branch)
    branch_name = branch_info.get("name", "")
    if branch_info.get("is_current", False):
        branch_name = f"* {branch_name}"
    else:
        branch_name = f"  {branch_name}"
    row.append(branch_name[:max_lengths.get("branch", 30)])

    # Branch type
    row.append(branch_info.get("type", "")[:max_lengths.get("type", 15)])

    # Branch status
    status_str = ", ".join(branch_info.get("status", []))
    row.append(status_str[:max_lengths.get("status", 25)])

    # Last commit date (abbreviated)
    last_commit = branch_info.get("last_commit", "")
    if "(" in last_commit:
        # Just show the time ago part
        last_commit = last_commit.split("(")[1].rstrip(")")
    row.append(last_commit[:max_lengths.get("last_commit", 15)])

    # PR status and details
    pr_state = pr_info.get("state", "NO_PR")
    row.append(pr_state[:max_lengths.get("pr_state", 10)])

    pr_title = pr_info.get("title", "")
    if pr_title:
        pr_title = shorten(pr_title, max_lengths.get("pr_title", 30), placeholder="...")
    row.append(pr_title)

    row.append(pr_info.get("number", "")[:max_lengths.get("pr_number", 8)])

    # Labels (abbreviated)
    labels = ", ".join(pr_info.get("labels", []))
    if labels:
        labels = shorten(labels, max_lengths.get("labels", 20), placeholder="...")
    row.append(labels)

    # Recommendation
    row.append(branch_info.get("recommendation", "")[:max_lengths.get("recommendation", 30)])

    return row


def get_all_branches_info(remote="origin", include_default=False, days_threshold=90):
    """Gather comprehensive information about all branches and PRs."""
    # Always fetch the latest info from remote
    print("Fetching latest information from remote...")
    try:
        subprocess.check_output(["git", "fetch", "--all"], stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("Warning: Failed to fetch from remote")

    default_remote = get_default_remote_branch()
    merged_branches = get_merged_branches(default_remote)
    remote_merged = get_remote_merged_branches(default_remote, remote)
    local_branches = get_local_branches()
    remote_branches = get_remote_branches(remote)
    current_branch = get_current_branch()

    # Get list of local branch names for comparison
    local_branch_names = [branch[0] for branch in local_branches]

    branches_info = []

    # Process local branches
    for branch, upstream, commit_date, author, commit_msg in local_branches:
        # Skip the default branch if requested
        if branch == default_remote and not include_default:
            continue

        # Initialize branch info
        branch_info = {
            "name": branch,
            "type": "Local",
            "status": [],
            "last_commit": format_date(commit_date),
            "author": author,
            "last_commit_msg": commit_msg,
            "age_days": get_branch_age_days(commit_date),
            "is_current": branch == current_branch,
            "is_default": branch == default_remote,
            "upstream": upstream
        }

        # Check if branch is merged
        if branch in merged_branches:
            branch_info["status"].append("MERGED")
        elif check_if_branch_was_merged_remotely(branch, remote):
            branch_info["status"].append("MERGED on GitHub")

        # Check if branch is abandoned
        if is_branch_abandoned(commit_date, days_threshold):
            branch_info["status"].append("ABANDONED")

        # Check tracking status
        if not upstream:
            # Check if branch exists on remote even without tracking relationship
            if branch_exists_on_remote(branch, remote):
                behind, ahead = compare_with_remote(branch, remote)
                if ahead > 0:
                    branch_info["status"].append(f"{ahead} ahead (untracked)")
                elif behind > 0:
                    branch_info["status"].append(f"{behind} behind (untracked)")
                else:
                    branch_info["status"].append("In sync (untracked)")
                branch_info["type"] = "Local+Remote"
            else:
                # Check if it was merged remotely
                is_merged_remotely = check_if_branch_was_merged_remotely(branch, remote)

                if is_merged_remotely:
                    branch_info["status"].append("Merged remotely, deleted on remote")
                    branch_info["type"] = "Local+Merged"
                else:
                    branch_info["status"].append("Never pushed")
        else:
            if remote_branch_exists(upstream):
                behind, ahead = get_ahead_behind_count(branch, upstream)
                if ahead > 0:
                    branch_info["status"].append(f"{ahead} ahead")
                if behind > 0:
                    branch_info["status"].append(f"{behind} behind")
                if ahead == 0 and behind == 0:
                    branch_info["status"].append("In sync")
                branch_info["type"] = "Local+Remote"
            else:
                # Check if it was merged remotely
                is_merged_remotely = check_if_branch_was_merged_remotely(branch, remote)

                if is_merged_remotely:
                    branch_info["status"].append("Merged remotely, deleted on remote")
                    branch_info["type"] = "Local+Merged"
                else:
                    branch_info["status"].append("Remote missing")

        # Get PR info
        pr_info = get_pr_info(branch, remote)

        # Get cleanup recommendation
        recommendation = get_cleanup_recommendation(branch_info, pr_info, branch == default_remote)
        branch_info["recommendation"] = recommendation

        branches_info.append((branch_info, pr_info))

    # Process remote-only branches
    for branch_name, full_branch, commit_date, author, commit_msg in remote_branches:
        # Skip if this branch already has a local counterpart
        if branch_name in local_branch_names or (branch_name == default_remote and not include_default):
            continue

        # Initialize branch info
        branch_info = {
            "name": branch_name,
            "type": "Remote-only",
            "status": [],
            "last_commit": format_date(commit_date),
            "author": author,
            "last_commit_msg": commit_msg,
            "age_days": get_branch_age_days(commit_date),
            "is_current": False,
            "is_default": branch_name == default_remote,
            "upstream": None
        }

        # Check if branch is merged
        if branch_name in remote_merged:
            branch_info["status"].append("MERGED")

        # Check if branch is abandoned
        if is_branch_abandoned(commit_date, days_threshold):
            branch_info["status"].append("ABANDONED")

        # Get PR info
        pr_info = get_pr_info(branch_name, remote)

        # Get cleanup recommendation
        recommendation = get_cleanup_recommendation(branch_info, pr_info, branch_name == default_remote)
        branch_info["recommendation"] = recommendation

        branches_info.append((branch_info, pr_info))

    # Sort results by branch type and then by date (newest first)
    branches_info.sort(
        key=lambda x: (
            0 if "Local+Remote" in x[0]["type"] else (1 if "Local" in x[0]["type"] else 2),
            x[0]["age_days"]
        )
    )

    return branches_info


def print_table(branches_info):
    """Print a formatted table of branch and PR information."""
    if not branches_info:
        print("No branches found.")
        return

    # Define column headers
    headers = [
        "Branch", "Type", "Status", "Last Activity",
        "PR State", "PR Title", "PR #", "Labels", "Recommendation"
    ]

    # Prepare data for tabulation
    table_data = []

    # Define maximum column lengths
    max_lengths = {
        "branch": 30,
        "type": 15,
        "status": 25,
        "last_commit": 15,
        "pr_state": 10,
        "pr_title": 30,
        "pr_number": 8,
        "labels": 20,
        "recommendation": 30
    }

    for branch_info, pr_info in branches_info:
        table_data.append(format_table_row(branch_info, pr_info, max_lengths))

    # Print the table
    if TABULATE_AVAILABLE:
        print(tabulate(table_data, headers, tablefmt="grid"))
    else:
        # Basic table formatting
        # Calculate column widths based on content
        col_widths = [
            max(len(str(row[i])) for row in table_data + [headers])
            for i in range(len(headers))
        ]

        # Print header
        header_line = " | ".join(headers[i].ljust(col_widths[i]) for i in range(len(headers)))
        print(header_line)
        print("-" * len(header_line))

        # Print rows
        for row in table_data:
            print(" | ".join(str(row[i]).ljust(col_widths[i]) for i in range(len(headers))))


def print_deletion_commands(branches_info, days_threshold, remote="origin"):
    """Print commands to delete old branches."""
    branches_to_delete = {"local": [], "remote": []}

    for branch_info, pr_info in branches_info:
        branch_name = branch_info["name"]
        branch_age = branch_info["age_days"]
        is_default = branch_info["is_default"]
        is_current = branch_info["is_current"]
        branch_type = branch_info["type"]

        # Skip default and current branches
        if is_default or is_current:
            continue

        # Identify branches older than the threshold
        if branch_age > days_threshold:
            if "Local" in branch_type:
                branches_to_delete["local"].append(branch_name)

            if "Remote" in branch_type or branch_exists_on_remote(branch_name, remote):
                branches_to_delete["remote"].append(branch_name)

    # Print deletion commands
    if branches_to_delete["local"] or branches_to_delete["remote"]:
        print(f"\n=== Commands to delete branches older than {days_threshold} days ===\n")

        if branches_to_delete["local"]:
            print("# Local branches to delete:")
            for branch in branches_to_delete["local"]:
                print(f"git branch -d {branch}  # Use -D instead of -d to force deletion if not fully merged")

        if branches_to_delete["remote"]:
            print("\n# Remote branches to delete:")
            for branch in branches_to_delete["remote"]:
                print(f"git push {remote} --delete {branch}")

        print("\n# To delete all at once:")

        if branches_to_delete["local"]:
            local_delete_cmd = "git branch -d " + " ".join(branches_to_delete["local"])
            print(f"{local_delete_cmd}  # Use -D instead of -d to force deletion if not fully merged")

        if branches_to_delete["remote"]:
            for branch in branches_to_delete["remote"]:
                print(f"git push {remote} --delete {branch}")
    else:
        print(f"\nNo branches older than {days_threshold} days found that can be deleted.")


def print_usage():
    """Print usage information."""
    print("\nUsage: git-branches-check-v2.py [remote] [options]")
    print("\nOptions:")
    print("  --show-default        Show the default branch (main/master) in the results")
    print("  --days=<days>         Set the threshold for abandoned branches (default: 90)")
    print("  --auto-delete=<days>  Automatically generate commands to delete branches older than <days>")
    print("  --debug               Enable debug output")
    print("  --help                Show this help message")


def main():
    # Check if we're in a git repository
    try:
        subprocess.check_output(["git", "rev-parse", "--is-inside-work-tree"], stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("Error: Not in a git repository")
        sys.exit(1)

    # Parse command line arguments
    remote = "origin"
    include_default = False
    days_threshold = 90
    auto_delete_threshold = None

    for arg in sys.argv[1:]:
        if arg == "--show-default":
            include_default = True
        elif arg == "--help":
            print_usage()
            sys.exit(0)
        elif arg == "--debug":
            global DEBUG
            DEBUG = True
            print("Debug mode enabled")
        elif arg.startswith("--days="):
            try:
                days_threshold = int(arg.split("=")[1])
            except (IndexError, ValueError):
                print(f"Error: Invalid days value: {arg}")
                sys.exit(1)
        elif arg.startswith("--auto-delete="):
            try:
                auto_delete_threshold = int(arg.split("=")[1])
            except (IndexError, ValueError):
                print(f"Error: Invalid auto-delete value: {arg}")
                sys.exit(1)
        elif not arg.startswith("--"):
            remote = arg

    # Get branch information
    branches_info = get_all_branches_info(remote, include_default, days_threshold)

    # Print the table
    print_table(branches_info)

    # Print deletion commands if requested
    if auto_delete_threshold is not None:
        print_deletion_commands(branches_info, auto_delete_threshold, remote)
    else:
        # Ask user for age threshold
        try:
            print("\n")
            days_input = input(
                "Enter the maximum age in days for branches to keep (branches older than this will be prepared for deletion) or press ENTER to exit: "
            )

            if days_input.strip() and days_input.strip().isdigit():
                deletion_threshold = int(days_input)
                print_deletion_commands(branches_info, deletion_threshold, remote)
            else:
                print("Exiting without deleting branches.")
        except (ValueError, KeyboardInterrupt):
            print("\nExiting without deleting branches.")


if __name__ == "__main__":
    main()
