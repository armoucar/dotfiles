#!/usr/bin/env python3
import subprocess
from datetime import datetime, timedelta
import os
import sys
import re
import json

try:
    from tabulate import tabulate
except ImportError:
    tabulate = None


def get_default_remote_branch():
    """Determine the default remote branch (e.g., main or master)."""
    try:
        output = (
            subprocess.check_output(["git", "symbolic-ref", "refs/remotes/origin/HEAD"], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
        # Output is something like "refs/remotes/origin/main"
        return output.split("/")[-1]
    except subprocess.CalledProcessError:
        # Try to guess the default branch
        for default in ["main", "master", "develop", "dev"]:
            try:
                subprocess.check_output(
                    ["git", "show-ref", "--verify", "--quiet", f"refs/remotes/origin/{default}"],
                    stderr=subprocess.DEVNULL,
                )
                return default
            except subprocess.CalledProcessError:
                continue
        return "main"  # fallback default branch


def get_merged_branches(default_remote):
    """Return a list of branches merged into origin/<default_remote>."""
    try:
        output = subprocess.check_output(
            ["git", "branch", "--merged", f"origin/{default_remote}"], stderr=subprocess.DEVNULL
        ).decode()
        merged = []
        for line in output.splitlines():
            branch = line.replace("*", "").strip()
            if branch and branch != default_remote:
                merged.append(branch)
        return merged
    except subprocess.CalledProcessError:
        return []


def get_local_branches():
    """Return a list of tuples: (branch, upstream, commit_date, author, last_commit_msg) sorted by commit date."""
    try:
        output = (
            subprocess.check_output(
                [
                    "git",
                    "for-each-ref",
                    "--sort=committerdate",
                    "--format=%(refname:short)|%(upstream:short)|%(committerdate:iso8601)|%(authorname)|%(contents:subject)",
                    "refs/heads/",
                ],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        branches = []
        for line in output.splitlines():
            parts = line.split("|", 4)  # Split into at most 5 parts
            if len(parts) >= 3:
                branch, upstream, commit_date = parts[0], parts[1], parts[2]
                author = parts[3] if len(parts) > 3 else ""
                commit_msg = parts[4] if len(parts) > 4 else ""
                branches.append((branch, upstream, commit_date, author, commit_msg))
        return branches
    except subprocess.CalledProcessError:
        return []


def get_remote_branches(remote="origin"):
    """Return a list of remote branches with their details."""
    try:
        output = (
            subprocess.check_output(
                [
                    "git",
                    "for-each-ref",
                    "--sort=committerdate",
                    "--format=%(refname:short)|%(committerdate:iso8601)|%(authorname)|%(contents:subject)",
                    f"refs/remotes/{remote}/",
                ],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        branches = []
        for line in output.splitlines():
            parts = line.split("|", 3)  # Split into at most 4 parts
            if len(parts) >= 2:
                branch = parts[0]
                # Skip HEAD reference
                if branch.endswith("/HEAD"):
                    continue
                commit_date = parts[1]
                author = parts[2] if len(parts) > 2 else ""
                commit_msg = parts[3] if len(parts) > 3 else ""
                # Remove the remote/ prefix for easier comparison
                branch_name = branch.replace(f"{remote}/", "")
                branches.append((branch_name, branch, commit_date, author, commit_msg))
        return branches
    except subprocess.CalledProcessError:
        return []


def remote_branch_exists(upstream):
    """Check if the remote tracking branch exists."""
    try:
        subprocess.check_output(
            ["git", "show-ref", "--verify", "--quiet", f"refs/remotes/{upstream}"], stderr=subprocess.DEVNULL
        )
        return True
    except subprocess.CalledProcessError:
        return False


def branch_exists_on_remote(branch_name, remote="origin"):
    """Check if a branch exists on the remote, even without tracking relationship."""
    try:
        output = (
            subprocess.check_output(["git", "ls-remote", "--heads", remote, branch_name], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
        return bool(output)  # If output is not empty, branch exists on remote
    except subprocess.CalledProcessError:
        return False


def check_if_branch_was_merged_remotely(branch_name, remote="origin"):
    """Check if a branch was merged remotely even if it's now deleted."""
    # Try to get the merge commit by looking at the commit messages
    default_remote = get_default_remote_branch()

    try:
        # This gets all commits on the default branch with "Merge" in their message
        output = subprocess.check_output(
            ["git", "log", "--merges", "--grep", f"Merge.*{branch_name}", f"origin/{default_remote}"],
            stderr=subprocess.DEVNULL
        ).decode().strip()

        if output:
            return True

        # If GitHub CLI is available, try to check if the branch had a PR that was merged
        try:
            pr_status = get_pr_status(branch_name, remote)
            if pr_status == "PR Merged":
                return True
        except Exception:
            pass

        return False
    except subprocess.CalledProcessError:
        return False


def get_ahead_behind_count(branch, upstream):
    """Return the number of commits 'branch' is ahead and behind its upstream."""
    try:
        output = (
            subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{upstream}...{branch}"], stderr=subprocess.DEVNULL
            )
            .decode()
            .strip()
        )
        # Output is of the form "X Y" where X is behind count and Y is ahead count
        parts = output.split()
        if len(parts) == 2:
            return int(parts[0]), int(parts[1])  # behind, ahead
        else:
            return 0, 0
    except subprocess.CalledProcessError:
        return 0, 0


def compare_with_remote(branch, remote="origin"):
    """Compare local branch with remote branch even without tracking relationship."""
    try:
        remote_branch = f"{remote}/{branch}"
        output = (
            subprocess.check_output(
                ["git", "rev-list", "--left-right", "--count", f"{remote_branch}...{branch}"],
                stderr=subprocess.DEVNULL,
            )
            .decode()
            .strip()
        )
        parts = output.split()
        if len(parts) == 2:
            return int(parts[0]), int(parts[1])  # behind, ahead
        else:
            return 0, 0
    except subprocess.CalledProcessError:
        return 0, 0


def is_branch_abandoned(commit_date, days_threshold=90):
    """Check if a branch is abandoned based on its last commit date."""
    try:
        dt = datetime.fromisoformat(commit_date)
        now = datetime.now(dt.tzinfo)
        return (now - dt) > timedelta(days=days_threshold)
    except Exception:
        return False


def get_branch_age_days(commit_date):
    """Get the age of a branch in days based on its last commit date."""
    try:
        dt = datetime.fromisoformat(commit_date)
        now = datetime.now(dt.tzinfo)
        return (now - dt).days
    except Exception:
        return 0


def get_current_branch():
    """Get the name of the current branch."""
    try:
        return (
            subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
    except subprocess.CalledProcessError:
        return ""


def get_remote_merged_branches(default_remote, remote="origin"):
    """Return a list of remote branches merged into origin/<default_remote>."""
    try:
        output = subprocess.check_output(
            ["git", "branch", "-r", "--merged", f"{remote}/{default_remote}"], stderr=subprocess.DEVNULL
        ).decode()
        merged = []
        for line in output.splitlines():
            branch = line.replace("*", "").strip()
            if branch and not branch.endswith("/HEAD") and not branch == f"{remote}/{default_remote}":
                # Remove the remote/ prefix
                branch_name = branch.replace(f"{remote}/", "")
                merged.append(branch_name)
        return merged
    except subprocess.CalledProcessError:
        return []


def format_date(commit_date):
    """Format the commit date with a human-readable time ago."""
    try:
        dt = datetime.fromisoformat(commit_date)
        formatted_date = dt.strftime("%Y-%m-%d %H:%M:%S %z")

        # Calculate days since last commit
        now = datetime.now(dt.tzinfo)
        days_ago = (now - dt).days
        if days_ago == 0:
            time_ago = "today"
        elif days_ago == 1:
            time_ago = "yesterday"
        else:
            time_ago = f"{days_ago} days ago"

        return f"{formatted_date} ({time_ago})"
    except Exception:
        return commit_date


def get_remote_url(remote="origin"):
    """Get the URL of the remote repository."""
    try:
        output = (
            subprocess.check_output(["git", "remote", "get-url", remote], stderr=subprocess.DEVNULL).decode().strip()
        )
        return output
    except subprocess.CalledProcessError:
        return ""


def get_pr_status(branch_name, remote="origin"):
    """Check if a branch has a PR and its status."""
    # Default status
    pr_status = "No PR"

    # Get remote URL to determine the hosting service (GitHub, GitLab, etc.)
    remote_url = get_remote_url(remote)

    if not remote_url:
        return pr_status

    # Try to determine if it's GitHub
    if "github.com" in remote_url:
        try:
            # Extract owner and repo from GitHub URL
            # Format can be git@github.com:owner/repo.git or https://github.com/owner/repo.git
            if remote_url.startswith("git@"):
                match = re.search(r"git@github\.com:([^/]+)/([^.]+)\.git", remote_url)
                if match:
                    owner, repo = match.groups()
            else:
                match = re.search(r"github\.com/([^/]+)/([^.]+)(\.git)?", remote_url)
                if match:
                    owner, repo = match.groups()[0:2]

            if not match:
                return pr_status

            # Use GitHub CLI if available
            try:
                # Check if gh CLI is installed
                subprocess.check_output(["gh", "--version"], stderr=subprocess.DEVNULL)

                # Use gh CLI to get PR status
                try:
                    # Try to get PR associated with the branch
                    output = (
                        subprocess.check_output(
                            [
                                "gh",
                                "pr",
                                "list",
                                "--head",
                                branch_name,
                                "--json",
                                "state",
                                "--repo",
                                f"{owner}/{repo}",
                            ],
                            stderr=subprocess.DEVNULL,
                        )
                        .decode()
                        .strip()
                    )

                    if output:
                        prs = json.loads(output)
                        if prs:
                            # Get the state of the first PR
                            state = prs[0].get("state", "").upper()
                            if state == "OPEN":
                                pr_status = "PR Open"
                            elif state == "MERGED":
                                pr_status = "PR Merged"
                            elif state == "CLOSED":
                                pr_status = "PR Closed"
                            else:
                                pr_status = f"PR {state}"
                except subprocess.CalledProcessError:
                    pass

                # If no PR found, check for merged PRs
                if pr_status == "No PR":
                    try:
                        output = (
                            subprocess.check_output(
                                [
                                    "gh",
                                    "pr",
                                    "list",
                                    "--head",
                                    branch_name,
                                    "--state",
                                    "merged",
                                    "--json",
                                    "state",
                                    "--repo",
                                    f"{owner}/{repo}",
                                ],
                                stderr=subprocess.DEVNULL,
                            )
                            .decode()
                            .strip()
                        )

                        if output:
                            prs = json.loads(output)
                            if prs:
                                pr_status = "PR Merged"
                    except subprocess.CalledProcessError:
                        pass
            except subprocess.CalledProcessError:
                # gh CLI not available
                pass
        except Exception:
            pass

    return pr_status


def main():
    # Check if we're in a git repository
    try:
        subprocess.check_output(["git", "rev-parse", "--is-inside-work-tree"], stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("Error: Not in a git repository")
        sys.exit(1)

    # Always fetch the latest info from remote
    print("Fetching latest information from remote...")
    try:
        subprocess.check_output(["git", "fetch", "--all"], stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("Warning: Failed to fetch from remote")

    # Get remote name, default to origin
    remote = "origin"
    if len(sys.argv) > 1 and not sys.argv[1].startswith("--"):
        remote = sys.argv[1]

    default_remote = get_default_remote_branch()
    merged_branches = get_merged_branches(default_remote)
    remote_merged = get_remote_merged_branches(default_remote, remote)
    local_branches = get_local_branches()
    remote_branches = get_remote_branches(remote)
    current_branch = get_current_branch()

    # Get list of local branch names for comparison
    local_branch_names = [branch[0] for branch in local_branches]

    results = []
    branch_details = {}  # Store branch details for later use

    # Process local branches
    for branch, upstream, commit_date, author, commit_msg in local_branches:
        # Skip the default branch if requested
        if branch == default_remote and "--show-default" not in sys.argv:
            continue

        # Determine branch status
        status = []
        branch_type = "Local"

        # Check if branch is current
        is_current = branch == current_branch
        if is_current:
            status.append("CURRENT")

        # Check if branch is merged
        if branch in merged_branches:
            status.append("MERGED")
        elif check_if_branch_was_merged_remotely(branch, remote):
            status.append("MERGED on GitHub")

        # Get branch age
        branch_age = get_branch_age_days(commit_date)

        # Check if branch is abandoned
        if is_branch_abandoned(commit_date):
            status.append("ABANDONED")

        # Check tracking status
        if not upstream:
            # Check if branch exists on remote even without tracking relationship
            if branch_exists_on_remote(branch, remote):
                behind, ahead = compare_with_remote(branch, remote)
                if ahead > 0:
                    status.append(f"{ahead} ahead (untracked)")
                elif behind > 0:
                    status.append(f"{behind} behind (untracked)")
                else:
                    status.append("In sync (untracked)")
                branch_type = "Local+Remote"
            else:
                # Before saying "Never pushed", check if it was merged remotely
                is_merged_remotely = check_if_branch_was_merged_remotely(branch, remote)
                pr_status = get_pr_status(branch, remote)

                if is_merged_remotely or pr_status == "PR Merged":
                    status.append("Merged remotely, deleted on remote")
                    branch_type = "Local+Merged"
                else:
                    status.append("Never pushed")
        else:
            if remote_branch_exists(upstream):
                behind, ahead = get_ahead_behind_count(branch, upstream)
                if ahead > 0:
                    status.append(f"{ahead} ahead")
                if behind > 0:
                    status.append(f"{behind} behind")
                if ahead == 0 and behind == 0:
                    status.append("In sync")
                branch_type = "Local+Remote"
            else:
                # Before saying "Remote missing", check if it was merged remotely
                is_merged_remotely = check_if_branch_was_merged_remotely(branch, remote)
                pr_status = get_pr_status(branch, remote)

                if is_merged_remotely or pr_status == "PR Merged":
                    status.append("Merged remotely, deleted on remote")
                    branch_type = "Local+Merged"
                else:
                    status.append("Remote missing")

        # Format the commit date
        formatted_date = format_date(commit_date)

        # Get PR status
        pr_status = get_pr_status(branch, remote)

        # Join status items
        status_str = ", ".join(status)

        # Add recommendation
        recommendation = ""
        if "MERGED" in status and not is_current:
            recommendation = "Can be deleted"
        elif "Merged remotely" in status_str and not is_current:
            recommendation = "Can be deleted"
        elif "ABANDONED" in status and not is_current:
            recommendation = "Consider updating or deleting"
        elif "Never pushed" in status_str:
            recommendation = "Consider pushing"
        elif "ahead" in status_str and "behind" not in status_str:
            recommendation = "Push changes"
        elif "behind" in status_str and "ahead" not in status_str:
            recommendation = "Pull changes"
        elif "behind" in status_str and "ahead" in status_str:
            recommendation = "Needs merge/rebase"
        elif "untracked" in status_str:
            recommendation = "Set up tracking"

        results.append([branch, branch_type, status_str, formatted_date, author, pr_status, recommendation])

        # Store branch details for later use
        branch_details[branch] = {
            "type": branch_type,
            "age": branch_age,
            "is_current": is_current,
            "upstream": upstream,
            "exists_on_remote": (
                branch_exists_on_remote(branch, remote) or remote_branch_exists(upstream) if upstream else False
            ),
        }

    # Process remote-only branches
    for branch_name, full_branch, commit_date, author, commit_msg in remote_branches:
        # Skip if this branch already has a local counterpart
        if branch_name in local_branch_names or branch_name == default_remote and "--show-default" not in sys.argv:
            continue

        # Determine branch status
        status = []
        branch_type = "Remote-only"

        # Check if branch is merged
        if branch_name in remote_merged:
            status.append("MERGED")

        # Get branch age
        branch_age = get_branch_age_days(commit_date)

        # Check if branch is abandoned
        if is_branch_abandoned(commit_date):
            status.append("ABANDONED")

        # Format the commit date
        formatted_date = format_date(commit_date)

        # Get PR status
        pr_status = get_pr_status(branch_name, remote)

        # Join status items
        status_str = ", ".join(status)

        # Add recommendation
        recommendation = ""
        if "MERGED" in status:
            recommendation = "Can be deleted from remote"
        elif "ABANDONED" in status:
            recommendation = "Consider deleting from remote"
        else:
            recommendation = "Consider checking out locally"

        results.append([branch_name, branch_type, status_str, formatted_date, author, pr_status, recommendation])

        # Store branch details for later use
        branch_details[branch_name] = {
            "type": branch_type,
            "age": branch_age,
            "is_current": False,
            "upstream": None,
            "exists_on_remote": True,
        }

    # Sort results by branch type and then by date (newest first)
    results.sort(key=lambda x: (0 if "Local+Remote" in x[1] else (1 if "Local" in x[1] else 2), x[3]), reverse=True)

    if results:
        headers = ["Branch", "Type", "Status", "Last Commit Date", "Author", "PR Status", "Recommendation"]
        if tabulate:
            print(tabulate(results, headers, tablefmt="grid"))
        else:
            # Fallback simple table formatting if tabulate is not installed.
            col_widths = [max(len(str(row[i])) for row in results + [headers]) for i in range(len(headers))]

            # Print header
            header_line = " | ".join(headers[i].ljust(col_widths[i]) for i in range(len(headers)))
            print(header_line)
            print("-+-".join("-" * col_widths[i] for i in range(len(headers))))

            # Print rows
            for row in results:
                print(" | ".join(str(row[i]).ljust(col_widths[i]) for i in range(len(headers))))
    else:
        print("No branches found.")

    # Ask user for age threshold
    try:
        print("\n")
        days_input = input(
            "Enter the maximum age in days for branches to keep (branches older than this will be prepared for deletion) or press ENTER to exit: "
        )

        # Exit gracefully if user presses ENTER or enters non-numeric input
        if not days_input.strip() or not days_input.strip().isdigit():
            print("Exiting without deleting branches.")
            sys.exit(0)

        days_threshold = int(days_input)

        # Identify branches older than the threshold
        branches_to_delete = {"local": [], "remote": []}

        for branch, details in branch_details.items():
            if details["age"] > days_threshold and branch != default_remote and not details["is_current"]:
                if details["type"] in ["Local", "Local+Remote", "Local+Merged"]:
                    branches_to_delete["local"].append(branch)
                if details["exists_on_remote"] or details["type"] == "Remote-only":
                    branches_to_delete["remote"].append(branch)

        # Print deletion commands
        if branches_to_delete["local"] or branches_to_delete["remote"]:
            print("\n=== Commands to delete branches older than", days_threshold, "days ===\n")

            if branches_to_delete["local"]:
                print("# Local branches to delete:")
                for branch in branches_to_delete["local"]:
                    print(f"git branch -d {branch}  # Use -D instead of -d to force deletion if not fully merged")

            if branches_to_delete["remote"]:
                print("\n# Remote branches to delete:")
                for branch in branches_to_delete["remote"]:
                    print(f"git push {remote} --delete {branch}")

            print("\n# To delete all at once:")

            if branches_to_delete["local"]:
                local_delete_cmd = "git branch -d " + " ".join(branches_to_delete["local"])
                print(f"{local_delete_cmd}  # Use -D instead of -d to force deletion if not fully merged")

            if branches_to_delete["remote"]:
                for branch in branches_to_delete["remote"]:
                    print(f"git push {remote} --delete {branch}")
        else:
            print(f"\nNo branches older than {days_threshold} days found that can be deleted.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

    # Print usage information
    if "--help" in sys.argv:
        print("\nUsage: git-check-branches [remote] [options]")
        print("\nOptions:")
        print("  --show-default   Show the default branch (main/master) in the results")
        print("  --help           Show this help message")


if __name__ == "__main__":
    main()
